// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id                    String                 @id @default(uuid())
  name                  String?
  email                 String?                @unique
  password              String?
  image                 String?
  bio                   String?
  birthdate             DateTime?
  address               String?
  phone                 String?
  //Interests           Interests[]
  //Hobbies             Hobbies[]

  role                  UserRole               @default(USER)
  emailVerified         DateTime?
  accounts              Account[]
  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?

  // catalogCreated  Catalog[]    @relation("CreatedById")
  // catalogUpdated  Catalog[]    @relation("UpdatedById")
  courseCreated    Course[]       @relation("CreatedById")
  courseUpdated    Course[]       @relation("UpdatedById")
  // courseTutor      Course[] @relation("CourseTutors", references: [id])
  // coursesInstructed Course[]         @relation("Instructor")
  coursesEnrolled  Enrollment[]
  coursesPurchased Purchase[]
  courseProgress   UserProgress[]
  ratings          Rating[]
  tutor            Tutor?
  superId          String?
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(uuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(uuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(uuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id     String @id @default(uuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

// model Catalog {
//     id          String @id @default(uuid())
//     title       String
//     description String @default("")

//     createdBy   User?    @relation(name: "CreatedById", fields: [createdById], references: [id])
//     createdById String
//     createdAt   DateTime @default(now())
//     updatedBy   User?    @relation(name: "UpdatedById", fields: [updatedById], references: [id])
//     updatedById String?
//     updatedAt   DateTime @updatedAt

//     courses Course[]

//     @@map("Catalogs")
// }

model CourseCreationStep {
  id           String @id @default(uuid())
  currentStep  String
  previousStep String
  nextStep     String

  @@map("CourseCreationSteps")
}

model Course {
  id          String       @id @default(uuid())
  title       String
  description String?      @default("")
  image       String?
  categoryId  String
  category    Category     @relation(fields: [categoryId], references: [id])
  price       Price?
  level       Int?         @default(1)
  isPublished Boolean      @default(false)
  avgRating   Float?     
  // startDate   DateTime
  // endDate     DateTime?
  createdById String
  createdBy   User         @relation(name: "CreatedById", fields: [createdById], references: [id])
  createdAt   DateTime     @default(now())
  updatedBy   User?        @relation(name: "UpdatedById", fields: [updatedById], references: [id])
  updatedById String?
  updatedAt   DateTime     @updatedAt
  // catalogs    Catalog[]  
  metadata    Metadata[]
  tutors      TutorsOnCourses[]
  chapters    Chapter[]
  attachments Attachment[]
  purchases   Purchase[]
  enrollments Enrollment[]
  ratings     Rating[]

  @@index([categoryId])
  @@map("Courses")
}

model Category {
  id   String @id @default(uuid())
  name String @unique

  courses Course[]

  @@map("Categories")
}

model Price {
  id                 String    @id @default(uuid())
  currency           String    @default("USD")
  fullPrice          Float     @default(0)
  discountedPrice    Float?
  discountExpireDate DateTime?
  courseId           String    @unique
  course             Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
}

model Metadata {
  id       String @id @default(uuid())
  key      String
  value    String
  type     String
  courseId String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
}

model Tutor {
  id       String  @id @default(uuid())
  userId   String  @unique
  user     User    @relation(fields: [userId], references: [id])
  name     String
  image    String?
  course   TutorsOnCourses[]
  ratings  Rating[]

  @@map("Tutors")
}

model TutorsOnCourses {
  courseId    String
  courses     Course @relation(fields: [courseId], references: [id])
  tutorId     String
  tutors      Tutor @relation(fields: [tutorId], references: [id])
  assignedAt  DateTime @default(now())
  assignedBy  String

  @@id([courseId, tutorId])
}

model Attachment {
  id   String @id @default(uuid())
  name String
  url  String @db.Text

  courseId String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([courseId])
  @@map("Attachments")
}

model Chapter {
  id          String  @id @default(uuid())
  title       String
  description String? @db.Text
  videoUrl    String? @db.Text
  status      String  @default("locked")
  duration    Int     @default(0)
  position    Int
  isPublished Boolean @default(false)
  isFree      Boolean @default(false)

  muxData MuxData?

  courseId String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  userProgress UserProgress[]

  headings Heading[]
  texts    Text[]
  images   Image[]
  videos   Video[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  // @@map("Chapters")

  @@index([courseId])
}

model Heading {
  id        String  @id @default(uuid())
  position  Int
  rank      Int     @default(1)
  content   String
  chapterId String
  chapter   Chapter @relation(fields: [chapterId], references: [id])
}

model Text {
  id        String  @id @default(uuid())
  position  Int
  size      Int     @default(1)
  content   String
  chapterId String
  chapter   Chapter @relation(fields: [chapterId], references: [id])
}

model Image {
  id        String  @id @default(uuid())
  position  Int
  size      Int     @default(1)
  url       String
  chapterId String
  chapter   Chapter @relation(fields: [chapterId], references: [id])
}

model Video {
  id          String  @id @default(uuid())
  position    Int
  aspectRatio String  @default("16/9")
  url         String
  chapterId   String
  chapter     Chapter @relation(fields: [chapterId], references: [id])
}

model Rating {
  id       String   @id @default(uuid())
  userId   String
  user     User     @relation(fields: [userId], references: [id])
  courseId String?
  course   Course?  @relation(fields: [courseId], references: [id])
  tutorId  String?
  tutor    Tutor?   @relation(fields: [tutorId], references: [id])
  rating   Float
  title    String?
  comment  String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("Ratings")
  @@unique([courseId, tutorId])
}

model MuxData {
  id         String  @id @default(uuid())
  assetId    String
  playbackId String?

  chapterId  String  @unique
  chapter    Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)
}

model UserProgress {
  id     String @id @default(uuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  chapterId String
  chapter   Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  isCompleted Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, chapterId])
  @@index([chapterId])
}

model Purchase {
  id       String @id @default(uuid())
  userId   String
  user     User   @relation(fields: [userId], references: [id])
  courseId String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  @@unique([userId, courseId])
  @@index([courseId])
  @@map("Purchases")
}

// model Content {
//     id        String      @id @default(uuid())
//     title     String
//     type      ContentType
//     content   String
//     courseId  String
//     course    Course      @relation(fields: [courseId], references: [id])
//     createdAt DateTime    @default(now())
//     updatedAt DateTime    @updatedAt

//     @@map("Contents")
// }

model Enrollment {
  id             String           @id @default(uuid())
  userId         String
  user           User             @relation(fields: [userId], references: [id])
  courseId       String
  course         Course           @relation(fields: [courseId], references: [id])
  grade          Int?
  status         EnrollmentStatus
  completionDate DateTime?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt

  @@unique([userId, courseId])
  @@map("Enrollments")
}

enum ContentType {
  TEXT
  VIDEO
  AUDIO
  PDF
}

enum EnrollmentStatus {
  STARTED
  COMPLETED
  CANCELLED
}

enum CourseStatus {
  DRAFTED
  PUBLISHED
}
