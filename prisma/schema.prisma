// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
    provider  = "postgresql"
    url       = env("DATABASE_URL")
    directUrl = env("DIRECT_URL")
}

enum UserRole {
    ADMIN
    TUTOR
    LEARNER
}

model User {
    id        String    @id @default(uuid())
    name      String?
    email     String?   @unique
    password  String?
    image     String?
    bio       String?
    birthdate DateTime?
    address   String?
    phone     String?
    //interests           Interests[]
    //hobbies             Hobbies[]

    role                  UserRole               @default(LEARNER)
    emailVerified         DateTime?
    accounts              Account[]
    isTwoFactorEnabled    Boolean                @default(false)
    twoFactorConfirmation TwoFactorConfirmation?
    courseCreated         Course[]               @relation("CreatedById")
    courseUpdated         Course[]               @relation("UpdatedById")
    categoryCreated       Category[]             @relation("CreatedById")
    categoryUpdated       Category[]             @relation("UpdatedById")
    imageUploaded         Image[]                @relation("UploadedById")
    coursesEnrolled       Enrollment[]
    coursesPurchased      Purchase[]
    courseProgress        UserProgress[]
    tutor                 Tutor?
    userGroupsOnCourses   UserGroupsOnCourses[]
    ratingsOnCourses      RatingsOnCourses[]
    ratingsOnTutors       RatingsOnTutors[]
}

model Account {
    id                String  @id @default(uuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model VerificationToken {
    id      String   @id @default(uuid())
    email   String
    token   String   @unique
    expires DateTime

    @@unique([email, token])
}

model PasswordResetToken {
    id      String   @id @default(uuid())
    email   String
    token   String   @unique
    expires DateTime

    @@unique([email, token])
}

model TwoFactorToken {
    id      String   @id @default(uuid())
    email   String
    token   String   @unique
    expires DateTime

    @@unique([email, token])
}

model TwoFactorConfirmation {
    id     String @id @default(uuid())
    userId String
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([userId])
}

model Course {
    id           String                @id @default(uuid())
    title        String
    description  String?               @default("")
    imageId      String?
    image        Image?                @relation(fields: [imageId], references: [id])
    categoryId   String
    category     Category              @relation(fields: [categoryId], references: [id])
    price        Price?
    level        Int?                  @default(1)
    isPublished  Boolean               @default(false)
    avgRating    Float?
    // startDate   DateTime
    // endDate     DateTime?
    createdById  String
    createdBy    User                  @relation(name: "CreatedById", fields: [createdById], references: [id])
    createdAt    DateTime              @default(now())
    updatedBy    User?                 @relation(name: "UpdatedById", fields: [updatedById], references: [id])
    updatedById  String?
    updatedAt    DateTime              @updatedAt
    metadata     Metadata[]
    tutors       TutorsOnCourses[]
    participants UserGroupsOnCourses[]
    chapters     Chapter[]
    purchases    Purchase[]
    enrollments  Enrollment[]
    ratings      RatingsOnCourses[]
    settings     CourseSettings[]
    group        Group[]

    @@index([categoryId])
    @@map("Courses")
}

model CourseSettings {
    id         String  @id @default(uuid())
    date       Boolean @default(false)
    repetition Boolean @default(false)
    price      Boolean @default(false)
    seats      Boolean @default(false)
    tags       Boolean @default(false)
    courseId   String
    course     Course  @relation(fields: [courseId], references: [id])
}

model Category {
    id          String   @id @default(uuid())
    name        String   @unique
    createdById String
    createdBy   User     @relation(name: "CreatedById", fields: [createdById], references: [id])
    createdAt   DateTime @default(now())
    updatedBy   User?    @relation(name: "UpdatedById", fields: [updatedById], references: [id])
    updatedById String?
    updatedAt   DateTime @updatedAt

    courses Course[]

    @@map("Categories")
}

model Price {
    id                 String    @id @default(uuid())
    currency           String    @default("USD")
    fullPrice          Float     @default(0)
    discountedPrice    Float?
    discountExpireDate DateTime?
    courseId           String    @unique
    course             Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
}

model Metadata {
    id       String @id @default(uuid())
    key      String
    value    String
    // type     String
    courseId String
    course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
}

model Tutor {
    id        String            @id @default(uuid())
    userId    String            @unique
    user      User              @relation(fields: [userId], references: [id])
    name      String
    image     String?
    avgRating Float?
    courses   TutorsOnCourses[]
    ratings   RatingsOnTutors[]

    @@map("Tutors")
}

model TutorsOnCourses {
    courseId   String
    courses    Course   @relation(fields: [courseId], references: [id])
    tutorId    String
    tutors     Tutor    @relation(fields: [tutorId], references: [id])
    assignedAt DateTime @default(now())
    assignedBy String

    @@id([courseId, tutorId])
}

model UserGroupsOnCourses {
    groupId    String
    group      Group    @relation(fields: [groupId], references: [id])
    userId     String
    user       User     @relation(fields: [userId], references: [id])
    assignedAt DateTime @default(now())
    assignedBy String
    course     Course?  @relation(fields: [courseId], references: [id])
    courseId   String?

    @@id([groupId, userId])
    @@map("UserGroupsOnCourses")
}

model Group {
    id       String                @id @default(uuid())
    name     String
    courseId String
    course   Course                @relation(fields: [courseId], references: [id], onDelete: Cascade)
    users    UserGroupsOnCourses[] // Many-to-many with users

    @@index([courseId])
    @@map("Groups")
}

model Chapter {
    id          String        @id @default(uuid())
    title       String
    description String?       @db.Text
    status      ChapterStatus @default(LOCKED)
    duration    Int           @default(0)
    position    Int
    isPublished Boolean       @default(false)
    isFree      Boolean       @default(false)

    courseId String
    course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
    content  String @default("")

    userProgress UserProgress[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([courseId])
}

model RatingsOnTutors {
    id      String  @id @unique @default(uuid())
    userId  String
    user    User    @relation(fields: [userId], references: [id])
    tutorId String?
    tutor   Tutor?  @relation(fields: [tutorId], references: [id])
    rating  Float
    title   String?
    comment String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model RatingsOnCourses {
    id       String  @id @unique @default(uuid())
    userId   String
    user     User    @relation(fields: [userId], references: [id])
    courseId String?
    course   Course? @relation(fields: [courseId], references: [id])
    rating   Float
    title    String?
    comment  String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model UserProgress {
    id     String @id @default(uuid())
    userId String
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

    chapterId String
    chapter   Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)

    isCompleted Boolean @default(false)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@unique([userId, chapterId])
    @@index([chapterId])
}

model Purchase {
    id            String   @id @default(uuid())
    userId        String
    user          User     @relation(fields: [userId], references: [id])
    courseId      String
    course        Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
    status        String   @default("SUCCESS") // PENDING, FAILED, REFUNDED, etc.
    transactionId String? // Optional for payment tracking
    createdAt     DateTime @default(now())
    updatedAt     DateTime @updatedAt()

    @@unique([userId, courseId])
    @@index([courseId])
    @@map("Purchases")
}

model Enrollment {
    id             String           @id @default(uuid())
    userId         String
    user           User             @relation(fields: [userId], references: [id])
    courseId       String
    course         Course           @relation(fields: [courseId], references: [id])
    grade          Int?
    status         EnrollmentStatus @default(NOTSTARTED)
    completionDate DateTime?
    createdAt      DateTime         @default(now())
    updatedAt      DateTime         @updatedAt

    @@unique([userId, courseId])
    @@map("Enrollments")
}

model Image {
    id           String   @id @default(uuid())
    name         String
    url          String
    key          String
    size         Int
    type         String
    uploadedById String
    uploadedBy   User     @relation(name: "UploadedById", fields: [uploadedById], references: [id])
    uploadedAt   DateTime @default(now())

    Course Course[]
}

model CreationStep {
    id       String     @id @default(uuid())
    name     String
    status   StepStatus @default(UNTOUCHED)
    position Int
    url      String     @unique
    for      String     @default("Courses")

    @@map("CreationSteps")
}

// enum ContentType {
//   TEXT
//   VIDEO
//   AUDIO
//   PDF
// }

enum EnrollmentStatus {
    NOTSTARTED
    STARTED
    COMPLETED
    CANCELLED
}

enum StepStatus {
    UNTOUCHED
    TOUCHED
    COMPLETED
    LOCKED
}

enum ChapterStatus {
    UNLOCKED
    LOCKED
}
