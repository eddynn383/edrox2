// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum UserRole {
  ADMIN
  TUTOR
  LEARNER
}

model User {
  id                    String                 @id @default(uuid())
  name                  String?
  email                 String?                @unique
  password              String?
  image                 String?
  bio                   String?
  birthdate             DateTime?
  address               String?
  phone                 String?
  //interests           Interests[]
  //hobbies             Hobbies[]

  role                  UserRole               @default(LEARNER)
  emailVerified         DateTime?
  accounts              Account[]
  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
  courseCreated         Course[]               @relation("CreatedById")
  courseUpdated         Course[]               @relation("UpdatedById")
  coursesEnrolled       Enrollment[]      
  coursesPurchased      Purchase[]
  courseProgress        UserProgress[]
  tutor                 Tutor?
  courses               UsersOnCourses[]
  ratingsOnCourses      RatingsOnCourses[]
  ratingsOnTutors       RatingsOnTutors[]
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(uuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(uuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(uuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id     String @id @default(uuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model Course {
  id             String       @id @default(uuid())
  title          String
  description    String?      @default("")
  image          String?
  categoryId     String
  category       Category     @relation(fields: [categoryId], references: [id])
  price          Price?
  level          Int?         @default(1)
  isPublished    Boolean      @default(false)
  avgRating      Float?     
  // startDate   DateTime
  // endDate     DateTime?
  createdById    String
  createdBy      User         @relation(name: "CreatedById", fields: [createdById], references: [id])
  createdAt      DateTime     @default(now())
  updatedBy      User?        @relation(name: "UpdatedById", fields: [updatedById], references: [id])
  updatedById    String?
  updatedAt      DateTime     @updatedAt 
  metadata       Metadata[]
  tutors         TutorsOnCourses[]
  participants   UsersOnCourses[]
  chapters       Chapter[]
  purchases      Purchase[]
  enrollments    Enrollment[]
  ratings        RatingsOnCourses[]

  @@index([categoryId])
  @@map("Courses")
}

model Category {
  id   String @id @default(uuid())
  name String @unique

  courses Course[]

  @@map("Categories")
}

model Price {
  id                 String    @id @default(uuid())
  currency           String    @default("USD")
  fullPrice          Float     @default(0)
  discountedPrice    Float?
  discountExpireDate DateTime?
  courseId           String    @unique
  course             Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
}

model Metadata {
  id       String @id @default(uuid())
  key      String
  value    String
  // type     String
  courseId String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
}

model Tutor {
  id        String  @id @default(uuid())
  userId    String  @unique
  user      User    @relation(fields: [userId], references: [id])
  name      String
  image     String?
  avgRating Float?
  courses   TutorsOnCourses[]
  ratings   RatingsOnTutors[]

  @@map("Tutors")
}

model TutorsOnCourses {
  courseId    String
  courses     Course @relation(fields: [courseId], references: [id])
  tutorId     String
  tutors      Tutor @relation(fields: [tutorId], references: [id])
  assignedAt  DateTime @default(now())
  assignedBy  String

  @@id([courseId, tutorId])
}

model UsersOnCourses {
  courseId    String
  courses     Course @relation(fields: [courseId], references: [id])
  userId      String
  users       User   @relation(fields: [userId], references: [id])
  assignedAt  DateTime @default(now())
  assignedBy  String

  @@id([courseId, userId])
}

model Chapter {
  id          String  @id @default(uuid())
  title       String
  description String? @db.Text
  status      ChapterStatus  @default(LOCKED)
  duration    Int     @default(0)
  position    Int
  isPublished Boolean @default(false)
  isFree      Boolean @default(false)

  courseId String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  content  Content[]

  userProgress UserProgress[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([courseId])
}

model Content {
  id          String     @id @default(uuid())
  type        String
  value       String
  position    Int

  chapterId   String
  chapter     Chapter  @relation(fields: [chapterId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model RatingsOnTutors {
  id       String   @id @default(uuid()) @unique
  userId   String
  user     User     @relation(fields: [userId], references: [id])
  tutorId  String?  
  tutor    Tutor?   @relation(fields: [tutorId], references: [id])
  rating   Float
  title    String?
  comment  String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model RatingsOnCourses {
  id       String   @id @default(uuid()) @unique
  userId   String
  user     User     @relation(fields: [userId], references: [id])
  courseId String?  
  course   Course?  @relation(fields: [courseId], references: [id])
  rating   Float
  title    String?
  comment  String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserProgress {
  id          String   @id @default(uuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  chapterId   String
  chapter     Chapter  @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  isCompleted Boolean  @default(false)

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([userId, chapterId])
  @@index([chapterId])
}

model Purchase {
  id       String @id @default(uuid())
  userId   String
  user     User   @relation(fields: [userId], references: [id])
  courseId String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  @@unique([userId, courseId])
  @@index([courseId])
  @@map("Purchases")
}

model Enrollment {
  id             String           @id @default(uuid())
  userId         String
  user           User             @relation(fields: [userId], references: [id])
  courseId       String
  course         Course           @relation(fields: [courseId], references: [id])
  grade          Int?
  status         EnrollmentStatus @default(NOTSTARTED)
  completionDate DateTime?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt

  @@unique([userId, courseId])
  @@map("Enrollments")
}

// enum ContentType {
//   TEXT
//   VIDEO
//   AUDIO
//   PDF
// }

enum EnrollmentStatus {
  NOTSTARTED
  STARTED
  COMPLETED
  CANCELLED
}

enum ChapterStatus {
  UNLOCKED
  LOCKED
}
