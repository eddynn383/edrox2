// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
    provider  = "postgresql"
    url       = env("DATABASE_URL")
    directUrl = env("DIRECT_URL")
}

enum UserRole {
    ADMIN
    USER
}

model User {
    id                    String                 @id @default(cuid())
    name                  String?
    email                 String?                @unique
    password              String?
    role                  UserRole               @default(USER)
    emailVerified         DateTime?
    image                 String?
    accounts              Account[]
    isTwoFactorEnabled    Boolean                @default(false)
    twoFactorConfirmation TwoFactorConfirmation?

    // catalogCreated  Catalog[]    @relation("CreatedById")
    // catalogUpdated  Catalog[]    @relation("UpdatedById")
    courseCreated    Course[]       @relation("CreatedById")
    courseUpdated    Course[]       @relation("UpdatedById")
    // courseTutor      Course[] @relation("CourseTutors", references: [id])
    // coursesInstructed Course[]         @relation("Instructor")
    coursesEnrolled  Enrollment[]
    coursesPurchased Purchase[]
    courseProgress   UserProgress[]
    reviews          Review[]
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model VerificationToken {
    id      String   @id @default(cuid())
    email   String
    token   String   @unique
    expires DateTime

    @@unique([email, token])
}

model PasswordResetToken {
    id      String   @id @default(cuid())
    email   String
    token   String   @unique
    expires DateTime

    @@unique([email, token])
}

model TwoFactorToken {
    id      String   @id @default(cuid())
    email   String
    token   String   @unique
    expires DateTime

    @@unique([email, token])
}

model TwoFactorConfirmation {
    id     String @id @default(cuid())
    userId String
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([userId])
}

// model Catalog {
//     id          String @id @default(cuid())
//     title       String
//     description String @default("")

//     createdBy   User?    @relation(name: "CreatedById", fields: [createdById], references: [id])
//     createdById String
//     createdAt   DateTime @default(now())
//     updatedBy   User?    @relation(name: "UpdatedById", fields: [updatedById], references: [id])
//     updatedById String?
//     updatedAt   DateTime @updatedAt

//     courses Course[]

//     @@map("Catalogs")
// }

model Course {
    id            String       @id @default(cuid())
    title         String
    url           String       @unique
    description   String?      @default ("")
    image         String?
    categoryId    String
    category      Category     @relation(fields: [categoryId], references: [id])
    price         Float?       @default(0.0)
    discountPrice Float?       @default(0.0)
    level         Int?         @default(1)
    isPublished   Boolean      @default(false)
    // startDate   DateTime
    // endDate     DateTime?
    createdById   String
    createdBy     User         @relation(name: "CreatedById", fields: [createdById], references: [id])
    createdAt     DateTime     @default(now())
    updatedBy     User?        @relation(name: "UpdatedById", fields: [updatedById], references: [id])
    updatedById   String?
    updatedAt     DateTime     @updatedAt
    // catalogs    Catalog[]  
    metadata      Metadata[]
    chapters      Chapter[]
    attachments   Attachment[]
    purchases     Purchase[]
    enrollments   Enrollment[]
    reviews       Review[]

    @@index([categoryId])
    @@map("Courses")
}

model Category {
    id      String @id @default(uuid())
    name    String @unique

    courses Course[]

    @@map("Categories")
}

model Metadata {
    id       String @id @default(uuid())
    key      String
    value    String
    type     String
    courseId String
    course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
}

model Attachment {
    id        String   @id @default(uuid())
    name      String
    url       String   @db.Text

    courseId  String
    course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([courseId])
    @@map("Attachments")
}

model Chapter {
    id           String   @id @default(uuid())
    title        String  
    description  String?  @db.Text
    videoUrl     String?  @db.Text
    status       String   @default("locked")
    duration     Int      @default(0)
    position     Int
    isPublished  Boolean  @default(false)
    isFree       Boolean  @default(false)

    muxData      MuxData?

    courseId     String
    course       Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)

    userProgress UserProgress[]

    headings     Heading[] 
    texts        Text[]
    images       Image[]
    videos       Video[]

    createdAt    DateTime @default(now())
    updatedAt    DateTime @updatedAt
    // @@map("Chapters")

    @@index([courseId])
}

model Heading {
    id        String   @id @default(uuid())
    position  Int
    rank      Int      @default(1)
    content   String 
    chapterId String
    chapter   Chapter  @relation(fields: [chapterId], references: [id])
}

model Text {
    id        String   @id @default(uuid())
    position  Int
    size      Int      @default(1)
    content   String
    chapterId String
    chapter   Chapter @relation(fields: [chapterId], references: [id]) 
}

model Image {
    id        String   @id @default(uuid())
    position  Int
    size      Int      @default(1)
    url       String
    chapterId String
    chapter   Chapter @relation(fields: [chapterId], references: [id]) 
}

model Video {
    id           String   @id @default(uuid())
    position     Int
    aspectRatio  String   @default("16/9")
    url          String
    chapterId    String
    chapter      Chapter  @relation(fields: [chapterId], references: [id]) 
}

model Review {
    id        String   @id @default(cuid())
    courseId  String
    course    Course   @relation(fields: [courseId], references: [id])
    userId    String
    user      User     @relation(fields: [userId], references: [id])
    rating    Int      // Rating for the course (e.g., 1 to 5 stars)
    title     String?
    comment   String?  // Optional comment/review text

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@map("Reviews")
}

model MuxData {
    id         String  @id @default(uuid())
    assetId    String
    playbackId String?

    chapterId  String  @unique
    chapter    Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)
}

model UserProgress {
    id          String   @id @default(uuid())
    userId      String
    user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    chapterId   String
    chapter     Chapter  @relation(fields: [chapterId], references: [id], onDelete: Cascade)

    isCompleted Boolean  @default(false)

    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    @@unique([userId, chapterId])
    @@index([chapterId])
}

model Purchase {
    id        String   @id @default(uuid())
    userId    String
    user      User     @relation(fields: [userId], references: [id])
    courseId  String
    course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt()

    @@unique([userId, courseId])
    @@index([courseId])
    @@map("Purchases")
}

// model Content {
//     id        String      @id @default(cuid())
//     title     String
//     type      ContentType
//     content   String
//     courseId  String
//     course    Course      @relation(fields: [courseId], references: [id])
//     createdAt DateTime    @default(now())
//     updatedAt DateTime    @updatedAt

//     @@map("Contents")
// }

model Enrollment {
    id             String           @id @default(cuid())
    userId         String
    user           User             @relation(fields: [userId], references: [id])
    courseId       String
    course         Course           @relation(fields: [courseId], references: [id])
    grade          Int?
    status         EnrollmentStatus
    completionDate DateTime?
    createdAt      DateTime         @default(now())
    updatedAt      DateTime         @updatedAt

    @@unique([userId, courseId])
    @@map("Enrollments")
}

enum ContentType {
    TEXT
    VIDEO
    AUDIO
    PDF
}

enum EnrollmentStatus {
    STARTED
    COMPLETED
    CANCELLED
}

enum CourseStatus {
    DRAFTED
    PUBLISHED
}
